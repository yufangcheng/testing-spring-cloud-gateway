stages:
  - sonarqube-check
  - build
  - deploy:dev
  - deploy:test
  - deploy:uat
  - deploy:prod
  
sonarqube-check:
  stage: sonarqube-check
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - mvn -U verify sonar:sonar -Dsonar.qualitygate.wait=true -Dsonar.branch.name=dev
  only:
    - dev
  tags:
    - shell
    - dev

build:
  stage: build
  interruptible: true
  before_script:
    - mvn -v
    - mvn clean package -DskipTests --update-snapshots
  script:
    - sudo docker build -t $IMAGE --build-arg APP_NAME=$APP_NAME .
    - sudo docker push $IMAGE
  retry:
    max: 2
    when: unknown_failure
  only:
    - dev
    - test
    - tags
  tags:
    - shell
    - vpc

deploy:dev:
  stage: deploy:dev
  needs:
    - job: build
  interruptible: true
  variables:
    GIT_STRATEGY: none
    GIT_CHECKOUT: "false"
  script:
    - cd /opt/docker/$BASE_DIR
    - sudo docker-compose pull -q
    - sudo docker-compose down
    - sudo docker-compose up -d
  only:
    - dev
  tags:
    - shell
    - dev

deploy:test:
  stage: deploy:test
  needs:
    - job: build
  interruptible: true
  variables:
    GIT_STRATEGY: none
    GIT_CHECKOUT: "false"
  script:
    - cd /opt/docker/$BASE_DIR
    - sudo docker-compose pull -q
    - sudo docker-compose down
    - sudo docker-compose up -d
  only:
    - test
  tags:
    - shell
    - test

deploy:uat:
  stage: deploy:uat
  needs:
    - job: build
  interruptible: true
  variables:
    GIT_STRATEGY: none
    GIT_CHECKOUT: "false"
    TAGGED_IMAGE: $IMAGE:$CI_COMMIT_TAG
  before_script:
    - echo $TAGGED_IMAGE
    - sudo docker pull $IMAGE
    - sudo docker tag $IMAGE $TAGGED_IMAGE
    - sudo docker push $TAGGED_IMAGE
  script:
    - cd /opt/docker/$BASE_DIR
    - sudo sed -i "s|v[0-9]\+\.[0-9]\+\.[0-9]\+\(-.*\)\?|$CI_COMMIT_TAG|" docker-compose.yml
    - sudo docker-compose down
    - sudo docker-compose up -d
  only:
    - tags
  tags:
    - shell
    - uat
    - vpc

deploy:prod:
  stage: deploy:prod
  needs:
    - job: build
  interruptible: true
  variables:
    GIT_STRATEGY: none
    GIT_CHECKOUT: "false"
    TAGGED_IMAGE: $IMAGE:$CI_COMMIT_TAG
  script:
    - echo $TAGGED_IMAGE
    - kubectl set image deployment/$APP_NAME $APP_NAME=$TAGGED_IMAGE
  when: manual
  only:
    - tags
  tags:
    - shell
    - vpc
